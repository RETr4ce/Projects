#https://crackmes.one/crackme/5ff767c433c5d42c3d0165e8

Tools:
	Radare2 

This crackme got me a bit off track. 
Entering the username "bad allocation"
it got me straight to "bad job dude"
```
Enter the username :bad allocation
Enter the password :Bad job dude :(
Try to login chance is :4
Enter the username :
```
However, "0x004012a2      3b02           cmp eax, dword [edx]"
indicates that it is checking the user input with "bad allocation"
with the password "bad cast". To solve this 'space' issue I used 
Radare2 to patch the value in the stack that ecx points too.  

//aa                  analyze the entire binary. Triple a autoname functions (see afna) 
[0x0040207b]> aaa
//This is two commands in one. fs will show flagspaces. 
//To init string flagspace do "fs strings". To list the flags it's f.
[0x0040207b]> fs strings;f
	0x00403204 21 str.Enter_the_username_:
	0x0040321c 21 str.Enter_the_password_:
	0x00403234 12 str.Good_job_:_
	0x00403240 16 str.Bad_job_dude_:
	0x00403250 25 str.Try_to_login_chance_is_:
	0x0040326c 13 str.You_lose_:__
//axt is searching for references to this address
[0x0040207b]> axt @ 0x0040321c
	fcn.00401220 0x401263 [DATA] mov edx, str.Enter_the_password_:
//Seek to address. Basically sets the address you need to be.
[0x0040207b]> s 0x401263
//print disassembly 25 bytes at address 
[0x00401263]> pd 25 @ 0x401263
|           0x00401263      ba1c324000     mov edx, str.Enter_the_password_: ; 0x40321c ; "Enter the password :"
|           0x00401268      e833030000     call fcn.004015a0
|           0x0040126d      8b0d70304000   mov ecx, dword [sym.imp.MSVCP140.dll_class_std::basic_istream_char__struct_std::char_traits_char___std::cin] ; [0x403070:4]=0x3e02 reloc.class_std::basic_istream_char__struct_std::char_traits_char___std::cin
|           0x00401273      8d5718         lea edx, [edi + 0x18]
|           0x00401276      e8e5060000     call fcn.00401960
|           0x0040127b      837f1410       cmp dword [edi + 0x14], 0x10 											//Related to std::string. If larger than 0x10 then the first dword of the string is a pointer to the ascii char buffer (Thx xusheng)
|           0x0040127f      8bcf           mov ecx, edi
|       ,=< 0x00401281      7202           jb 0x401285
|       |   0x00401283      8b0f           mov ecx, dword [edi]
|       |   ; CODE XREF from fcn.00401220 @ 0x401281
|       `-> 0x00401285      837f100e       cmp dword [edi + 0x10], 0xe 												//Checks if the string has a lenght of 14 with the user input. 
|       ,=< 0x00401289      0f85c1000000   jne 0x401350
|       |   0x0040128f      bac0314000     mov edx, str.bad_allocation ; 0x4031c0 ; "bad allocation"
|       |   0x00401294      be0a000000     mov esi, 0xa
|       |   0x00401299      0f1f80000000.  nop dword [eax]
|       |   ; CODE XREF from fcn.00401220 @ 0x4012af
|      .--> 0x004012a0      8b01           mov eax, dword [ecx]
|      :|   0x004012a2      3b02           cmp eax, dword [edx]														//Checks if the user input matches "bad allocation" else jump
|     ,===< 0x004012a4      750b           jne 0x4012b1
|     |:|   0x004012a6      83c104         add ecx, 4
|     |:|   0x004012a9      83c204         add edx, 4
|     |:|   0x004012ac      83ee04         sub esi, 4
|     |`==< 0x004012af      73ef           jae 0x4012a0
|     | |   ; CODE XREF from fcn.00401220 @ 0x4012a4
|     `---> 0x004012b1      8a01           mov al, byte [ecx]
|       |   0x004012b3      3a02           cmp al, byte [edx]
|      ,==< 0x004012b5      7521           jne 0x4012d8
|      ||   0x004012b7      8a4101         mov al, byte [ecx + 1]
//Set Breakpoint
[0x00401263]> db 0x0040127f
//Run the program and continue execution 3 times
[0x00401263]> ood;3dc
Enter the username :badaallocation
Enter the password :badccast
hit breakpoint at: 0x0040127f
//Check the offset of edi
[0x00401263]> dr edi 
0x0093fd10
//Show 45 bytes hexdump at offset  
[0x00401263]> px 45 @ 0x0093fd10
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
0x0093fd10  6261 6461 616c 6c6f 6361 7469 6f6e 0076  badaallocation.v
0x0093fd20  0e00 0000 0f00 0000 6261 6463 6361 7374  ........badccast
0x0093fd30  0022 8300 842c 8300 0800 0000 0f         ."...,.......
//set address
[0x00401263]> s 0x0093fd10
//Show 15 bytes
[0x0093fd10]> px 15
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
0x0093fd10  6261 6461 616c 6c6f 6361 7469 6f6e 0076  badaallocation.v
//Write string
[0x0093fd10]> w bad allocation
[0x0093fd10]> px
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
0x0093fd10  6261 6420 616c 6c6f 6361 7469 6f6e 0076  bad allocation.v
//set offset + 24 bytes and show 15 bytes hexdump
[0x0093fd10]> s 0x0093fd10 + 24; w bad cast; px 15
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
0x0093fd28  6261 6463 6361 7374 0022 8300 842c 8300  bad cast."...,..
//dc
Good job :)
//quit Radare2
[0x0083127f]> q
Do you want to quit? (Y/n)
Do you want to kill the process? (Y/n)
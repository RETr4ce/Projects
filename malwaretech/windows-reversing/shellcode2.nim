#[
    After allocating memory. Shell code is pushed from sub_404040. 
    Stored on the stack msvcrt, kernel dll, GetModuleFileNameA, fopen, 
    fread,fseek, fclose and rb. Then it's opening itself and copy 38 
    bytes starting from position 78 as the key. The flag is the first 
    36 bytes you can find in main that needs to be xored.

    Another way to get the flag is to manipulate the message box to load the 
    effective address of ebp+28in mov eax, ebp+BC. This will popup the key 
    in a messagebox.

    FLAG{STORE-EVERYTHING-ON-THE-STACK}
]#

import std/[streams]

const flag: array[36, int] = [0x12,0x24,0x28,0x34,0x5B,0x23,0x26,0x20,
                              0x35,0x37,0x4C,0x28,0x76,0x26,0x33,0x37,
                              0x3A,0x27,0x3D,0x6E,0x25,0x48,0x6F,0x3C,
                              0x58,0x3A,0x68,0x2C,0x43,0x73,0x10,0x0E,
                              0x10,0x6B,0x10,0x6F]

var 
    strm = newFileStream("shellcode2.exe_", fmRead)
    key: array[38, byte]                                        

strm.setPosition(78)
discard strm.readData(key[0].unsafeAddr, 38)

for i in 0..<flag.len:
    stdout.write(char(flag[i] xor int(key[i mod key.len])))
echo()
